"Games"
{
	"tf"
	{
		"Signatures"
		{
			"CWeaponMedigun::CreateMedigunShield"
			{
				// find entity_medigun_shield string with more then just 1 block, the main fuction, exit that and there should only be 1 function where its contained
				//thats it.
				
				"windows64"	"\x48\x89\x74\x24\x10\x57\x48\x83\xEC\x30\x8B\x91\x58\x0A\x00\x00"
				"linux"		"@_ZN14CWeaponMedigun19CreateMedigunShieldEv"
			}
			"CTFPlayerShared::RecalculatePlayerBodygroups"
			{
				// string aPostInventoryA, most top function.
				"windows64"	"\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x20\x48\x8B\xD9\x48\x8B\x89\xC0\x01\x00\x00"
				"linux64"		"@_ZN15CTFPlayerShared27RecalculatePlayerBodygroupsEv"
			}
			
			"CBasePlayer::SnapEyeAngles"
			{
				// string "Usage:  setang pitch yaw <roll optional"
				//Very short CALL
				"windows64"	"\x8B\x02\x89\x81\x6C\x0D\x00\x00"
				"linux64"		"@_ZN11CBasePlayer13SnapEyeAnglesERK6QAngle"
			}
			"CBaseEntity::SetAbsVelocity"
			{
				// string "TRAIN(%s): Blocked by %s\n"
				// inside a very tall block, bottom call, this call is modearetly sized and has no strings.
				"windows64"	"\x48\x89\x5C\x24\x10\x57\x48\x83\xEC\x40\xF3\x0F\x10\x81\x2C\x03\x00\x00"
				"linux64"		"@_ZN11CBaseEntity14SetAbsVelocityERK6Vector"
			}
			"CBaseObject::ShouldQuickBuild"
			{
				//string "upgrade_rate_mod" directly it.
				"linux64"		"@_ZN11CBaseObject16ShouldQuickBuildEv"
				"windows64"	"\x40\x53\x48\x83\xEC\x20\x48\x83\x3D\x42\x00\x82\x00\x00
			}
			"CTFNavMesh::ComputeBlockedArea"
			{
				"library"	"server"
				"linux64"		"@_ZN10CTFNavMesh19ComputeBlockedAreasEv"

				// aFuncDoor_0 is there twice with team filter

				"windows64"	"\x40\x55\x53\x41\x54\x41\x57"
			}
			"CBaseCombatWeapon::FinishReload()"
			{
				// string aLastShotCrits
				// not extreamly small function, and no other strings, and has multiple calls
				"library"	"server"
				"linux64"		"@_ZN17CBaseCombatWeapon12FinishReloadEv"
				"windows64"	"\x40\x53\x48\x83\xEC\x30\x48\x8B\x01\x48\x8B\xD9\xFF\x90\xD8\x0D\x00\x00\x84\xC0\x74\x2A\xC6\x83\x78\x07\x00\x00\x00"
			}
			"CObjectSentrygun::Fire"
			{
				//string mult_engy_sentry_damage with TF_3rdPersonMuzzleFlash_SentryGun string too
				"library"	"server"
				"linux64"		"@_ZN16CObjectSentrygun4FireEv"
				"windows64"	"\x40\x55\x57\x48\x8D\xAC\x24\x38\xFD\xFF\xFF"
			}
			"CObjectSentrygun::FindTarget"
			{
				//mult_sentry_firerate, small block at the very top, and hope.
				"library"	"server"
				"linux64"		"@_ZN16CObjectSentrygun10FindTargetEv"
				"windows64"	"\x40\x55\x56\x41\x57\x48\x8D\xAC\x24\x10\xFF\xFF\xFF"
			}
			"CTFPlayer::CanAirDash"
			{
				//air_dash_count, smaller function.
				"library"	"server"
				"linux64"		"@_ZNK9CTFPlayer10CanAirDashEv"
				"windows64"	"\x48\x89\x6C\x24\x10\x48\x89\x74\x24\x18\x57\x48\x83\xEC\x30\x8B\x81\xD4\x1E\x00\x00"
			}
			"CTFPlayer::GetChargeEffectBeingProvided"
			{
				"library"	"server"
				"linux"		"@_ZN9CTFPlayer28GetChargeEffectBeingProvidedEv"
				"windows"	"\x55\x8B\xEC\x51\x56\x8B\xF1\x8D\x86\xC4\x22\x00\x00"
			}
			"CTFPlayer::RegenThink"
			{
				//string RegenThink, small function
				"library"	"server"
				"linux64"		"@_ZN9CTFPlayer10RegenThinkEv"
				"windows64"	"\x48\x89\x5C\x24\x08\x48\x89\x74\x24\x10\x57\x48\x83\xEC\x20\x45\x33\xC0"
			}
			"CTFPlayer::RemoveAllOwnedEntitiesFromWorld"
			{
				"library"	"server"
				"linux"		"@_ZN9CTFPlayer31RemoveAllOwnedEntitiesFromWorldEb"
				"windows"	"\x55\x8B\xEC\x56\x8B\xF1\xE8\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A"
			}
			"CBaseEntity::SetLocalOrigin" // String aBadSetlocalori,   Bad SetLocalOrigin(%f,%f,%f) on %s\n
			{
				"library"	"server"
				"linux64"		"@_ZN11CBaseEntity14SetLocalOriginERK6Vector"
				"windows64"	"\x48\x89\x5C\x24\x10\x48\x89\x74\x24\x18\x57\x48\x83\xEC\x50\xF3\x0F\x10\x0D\xE1\x45\xA4\x00"
			}
			"CBaseEntity::SetAbsOrigin" // String models/airboat.mdl, look up, first call
			{
				"library"	"server"
				"linux64"		"@_ZN11CBaseEntity12SetAbsOriginERK6Vector"
				"windows64"	"\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x70\x48\x8B\xFA"
			}
			"CBaseEntity::SetAbsAngles" // String models/airboat.mdl, look up, 2nd call
			{
				"library"	"server"
				"linux64"		"@_ZN11CBaseEntity12SetAbsAnglesERK6QAngle"
				"windows64"	"\x48\x89\x5C\x24\x18\x56\x48\x81\xEC\xA0\x00\x00\x00\x48\x8B\xF2"
			}
			"CBaseAnimating::InvalidateBoneCache"// Void CBaseCombatCharacter::Weapon_Drop ("ValveBiped.Weapon_bone"), Big function with 11 calls, the 5th one from top, very small function
			{
				"library"	"server"
				"linux64"		"@_ZN14CBaseAnimating19InvalidateBoneCacheEv"
				"windows64"	"\x48\x8B\x89\x88\x05\x00\x00\xE9\x2A\x2A\x2A\x2A"
			}
			"CTFProjectile_HealingBolt::ImpactTeamPlayer()"
			{
				// x-ref "Weapon_Arrow.ImpactFleshCrossbowHeal" in branching function
				"library"	"server"
				"linux64"		"@_ZN25CTFProjectile_HealingBolt16ImpactTeamPlayerEP9CTFPlayer"
				"windows64"	"\x48\x85\xD2\x0F\x84\x2A\x2A\x2A\x2A\x57\x41\x57\x48\x83\xEC\x58"
			}
			"CTFProjectile_Arrow::Create" //both tf_projectile_grapplinghook and tf_projectile_arrow in the same function.
			{
				"library"	"server"
				"linux64"		"@_ZN19CTFProjectile_Arrow6CreateERK6VectorRK6QAngleff16ProjectileType_tP11CBaseEntityS8_"
				"windows64"	"\x48\x89\x5C\x24\x08\x48\x89\x6C\x24\x10\x48\x89\x74\x24\x18\x57\x48\x83\xEC\x60\x8B\x9C\x24\x90\x00\x00\x00"
			}
			"CObjectDispenser::MakeCarriedObject" //offset aBuildingDispen ; "Building_Dispenser.Idle"  one with 5 calls
			{
				"library"	"server"
				"linux64"		"@_ZN11CBaseObject17MakeCarriedObjectEP9CTFPlayer"
				"windows64"	"\x48\x89\x5C\x24\x08\x48\x89\x74\x24\x10\x57\x48\x83\xEC\x20\x48\x8D\x05\x0A\x2A\x4B\x00"
			}
			"CObjectSentrygun::MakeCarriedObject" // offset aPlayerCarryobj , with "userid" and "object" go up and find Xref, find the one with only 2 calls and no strings.
			{
				"library"	"server"
				"linux"		"@_ZN16CObjectSentrygun17MakeCarriedObjectEP9CTFPlayer"
				"windows"	"\x55\x8B\xEC\x56\x8B\xF1\x80\xBE\x04\x0B\x00\x00\x00"
			}
			"Studio_FindAttachment"
			{
				//sentry_on_go_active -> CBaseAnimating::LookupAttachment -> Studio_FindAttachment
				"windows64"	"\x48\x89\x5C\x24\x08\x48\x89\x74\x24\x10\x57\x48\x83\xEC\x20\x48\x8B\xF2\x48\x8B\xF9\x48\x85\xC9"
				"linux64"		"@_Z21Studio_FindAttachmentPK10CStudioHdrPKc"
			}
			"CTFGameRules::CalcPlayerScore"
			{
				"linux64"		"@_ZN12CTFGameRules15CalcPlayerScoreEP12RoundStats_tP9CTFPlayer"
				"windows64"	"\x40\x53\x48\x83\xEC\x30\x4C\x8B\xD2"
			}
			"CBaseObject::FinishedBuilding" //CBaseObject::FinishedBuilding(CBaseObject *__hidden this)
			{
				//aObjectPoints string, then check XREF from that function, only one exists, thats the one.
				// It should have no strings at all
				"linux64"		"@_ZN11CBaseObject16FinishedBuildingEv"
				"windows64"	"\x48\x89\x5C\x24\x10\x57\x48\x81\xEC\xA0\x00\x00\x00\xB2\x01"
			}
			"CTFBotProxy::InputSpawn"
			{
				//unfindable?
				"windows"   "\x55\x8B\xEC\x56\x57\x68\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A"
				"linux"     "@_Z22NextBotCreatePlayerBotI6CTFBotEPT_PKcb"
			}		
			// search string: "match"
			"BotManager::MaintainBotQuota"
			{
				//unfindable?
				"windows"   "\x55\x8B\xEC\x81\xEC\x14\x01\x00\x00\xA1"
				"linux"     "@_ZN13CTFBotManager16MaintainBotQuotaEv"
			}
			// String "deploy_buff_banner" only one exists
			"CTFBuffItem::RaiseFlag" 
			{
				"linux64" 	"@_ZN11CTFBuffItem9RaiseFlagEv"
				"windows64" 	"\x48\x89\x5C\x24\x20\x56\x48\x83\xEC\x30\x8D\x82\x55\xFF\xFF\xFF"
			}
			// string "Weapon_BuffBanner.HornBlue" is a func WITHOUT "models/workshop/weapons/c_models/c_para"
			"CTFBuffItem::BlowHorn" 
			{
				"linux64" 	"@_ZN11CTFBuffItem8BlowHornEv"
				"windows64" 	"\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x30\x48\x8B\xF9\xE8\x2A\x2A\x2A\x2A\x48\x8B\xD8\x48\x85\xC0\x0F\x84\x2A\x2A\x2A\x2A\x48\x8B\x00"
			}
			"CWeaponMedigun::AllowedToHealTarget()"
			{
				// contains non-unique string "weapon_blocks_healing" with references to CTFPlayerShared offset in the next few blocks
				"library"	"server"
				"linux64"		"@_ZN14CWeaponMedigun19AllowedToHealTargetEP11CBaseEntity"
				"windows64"	"\x48\x89\x5C\x24\x10\x48\x89\x6C\x24\x18\x48\x89\x74\x24\x20\x57\x48\x83\xEC\x30\x48\x8B\xDA"
			}
			"CTFPlayer::SpeakConceptIfAllowed()"
			{
				// unique string xref "disguiseclass:%s"
				"library"	"server"
				"linux64"		"@_ZN9CTFPlayer21SpeakConceptIfAllowedEiPKcPcjP16IRecipientFilter"
				"windows64"	"\x48\x89\x5C\x24\x10\x4C\x89\x4C\x24\x20\x4C\x89\x44\x24\x18\x55"
			}
			"CTFPlayer::ManageRegularWeapons()"
			{
				// semi-unique xref "PlayerLoadoutUpdated"
				"library"		"server"
				"linux64"			"@_ZN9CTFPlayer20ManageRegularWeaponsEP19TFPlayerClassData_t"
				"windows64"		"\x48\x8B\xC4\x48\x89\x50\x10\x55\x53\x56\x57\x41\x54\x41\x55"
			}
			"CTFWeaponBaseMelee::GetShootSound"
			{
				// "Weapon_Slap.OpenHand", last function in the end
				"library"		"server"
				"linux64"			"@_ZNK18CTFWeaponBaseMelee13GetShootSoundEi"
				"windows64"		"\x48\x89\x6C\x24\x10\x48\x89\x74\x24\x18\x57\x48\x83\xEC\x20\x8B\xEA\x48\x8B\xF9"
			}
			"CTFWeaponBaseMelee::Smack"
			{
				// string melee_cleave_attack, only once.
				"library"			"server"
				"linux64"			"@_ZN18CTFWeaponBaseMelee5SmackEv"
				"windows64"			"\x40\x57\x41\x57\x48\x81\xEC\xC8\x00\x00\x00"
			}
			"NextBotGroundLocomotion::UpdateGroundConstraint"
			{
				//unfindable?
				"windows"	"\x53\x8B\xDC\x83\xEC\x08\x83\xE4\xF0\x83\xC4\x04\x55\x8B\x6B\x04\x89\x6C\x24\x04\x8B\xEC\x81\xEC\x28\x01\x00\x00\xA1\x2A\x2A\x2A\x2A"
				"linux"		"@_ZN23NextBotGroundLocomotion22UpdateGroundConstraintEv"
			}
			"CBaseAnimating::ResetSequenceInfo" //( )
			{
				"windows"	"\x55\x8B\xEC\x51\x56\x8B\xF1\x83\xBE\xD8\x03\x00\x00\xFF"
				"linux"		"@_ZN14CBaseAnimating17ResetSequenceInfoEv"
			}			
			"CBaseAnimating::GetAttachment"
			// bool ( int iAttachment, Vector &absOrigin, QAngle &absAngles )
			// aVehicleDriverE ; "vehicle_driver_eyes"
			// 4 calls, get the 2nd one
			{
				"windows64"	"\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x20\x80\xB9\x65\x04\x00\x00\x00\x48\x8B\xFA\x48\x8B\xD9\x75\x2A\x48\x83\xB9\xC0\x05\x00\x00\x00\x75\x2A\xE8\x2A\x2A\x2A\x2A\x48\x85\xC0\x74\x2A\x48\x8B\xCB\xE8\x2A\x2A\x2A\x2A\x48\x8B\x8B\xC0\x05\x00\x00\x48\x85\xC9\x74\x2A\x48\x83\x39\x00\x74\x2A\x48\x8B\xD7\xE8\x2A\x2A\x2A\x2A"
				"linux64"		"@_ZN14CBaseAnimating13GetAttachmentEiR6VectorR6QAngle"
			}	
			"CTFPlayerShared::PulseRageBuff()"
			{
				// last call in assembly block containing unique string "mod_soldier_buff_range"
				"library"	"server"
				"linux64"		"@_ZN15CTFPlayerShared13PulseRageBuffENS_13ERageBuffSlotE"
				"windows64"	"\x48\x8B\xC4\x56\x41\x54"
			}
			"CTFWeaponBaseMelee::DoSwingTraceInternal"
			{
				//string "melee_range_multiplier"
  			  	"library"    "server"
    			"linux64"      "@_ZN18CTFWeaponBaseMelee20DoSwingTraceInternalER10CGameTracebP10CUtlVectorIS0_10CUtlMemoryIS0_iEE"
				"windows64"	"\x48\x89\x74\x24\x18\x55\x57\x41\x55\x41\x56\x41\x57\x48\x8D\xAC\x24\xA0\xF6\xFF\xFF"
			}
			"CTeamplayRoundBasedRules::ResetPlayerAndTeamReadyState"
			{
				// From Mikusch, but now unfindable in 64x ?
				"library"	"server"
				"linux"		"@_ZN24CTeamplayRoundBasedRules28ResetPlayerAndTeamReadyStateEv"
				"windows"	"\x55\x8B\xEC\x51\x56\x57\x8B\xF9\xC6\x45\xFF\x00\x33\xF6"
			}
			"CTFGCServerSystem::PreClientUpdate"
			{
				// "You must set maxplayers to 32 to host Mann vs. Machine\n"
				"library"	"server"
				"linux64"		"@_ZN17CTFGCServerSystem15PreClientUpdateEv"
				"windows64"	"\x40\x53\x55\x56\x41\x56\x41\x57\x48\x83\xEC\x30"
			}
		}
		"Functions"
		{
			"CBaseObject::ShouldQuickBuild"
			{
				"signature"	"CBaseObject::ShouldQuickBuild"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"entity"
			}
			"CEconItemView::IterateAttributes"
			{
				"offset"	"CEconItemView::IterateAttributes"
				"hooktype"	"raw"
				"return"	"void"
				"this"		"address"
				"arguments"
				{
					"IEconItemAttributeIterator"
					{
						"type"	"objectptr"
					}
				}
			}
			"CWeaponMedigun::CreateMedigunShield"
			{
				"signature"	"CWeaponMedigun::CreateMedigunShield"
				"callconv"  "thiscall"
				"return"	"void"
				"this"		"entity"
			}
			"CTFWeaponBaseMelee::DoSwingTraceInternal"
			{
				"signature"	"CTFWeaponBaseMelee::DoSwingTraceInternal"
				"callconv"    	"thiscall"
				"return"	"bool"
				"this"		"entity"
				"arguments"
				{
					"trace"
					{
						"type"	"objectptr"
					}
					"bCleave"
					{
						"type"	"bool"
					}
					"pTargetTraceVector"
					{
						"type"	"vectorptr"
					}
				}
			}
			"CTFPlayerShared::PulseRageBuff()"
			{
				"signature"		"CTFPlayerShared::PulseRageBuff()"
				"callconv"		"thiscall"
				"return"		"void"
				"this"			"address"
				"arguments"
				{
					"buff_slot"
					{
						"type"	"int"
					}
				}
			}
			"NextBotGroundLocomotion::UpdateGroundConstraint"
			{
				"signature"	"NextBotGroundLocomotion::UpdateGroundConstraint"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"address"
				"arguments"
				{
				
				}
			}
			"CTFBuffItem::RaiseFlag"
			{
				"signature"    	"CTFBuffItem::RaiseFlag"
				"callconv"		"thiscall"
				"return"		"void"
				"this"			"entity"
			}
			"CTFBuffItem::BlowHorn"
			{
				"signature"    	"CTFBuffItem::BlowHorn"
				"callconv"		"thiscall"
				"return"		"void"
				"this"			"entity"
			}
			"CTFGCServerSystem::PreClientUpdate"
			{
				"signature"    	"CTFGCServerSystem::PreClientUpdate"
				"callconv"	"thiscall"
				"return"    	"void"
				"this"		"ignore"
			}
			"CBaseObject::FirstSpawn"
           	{
				"signature"    	"CBaseObject::FirstSpawn"
				"callconv"	"thiscall"
  				"return"    	"void"
 				"this"        	"entity"
           	}
			"CBaseObject::FinishedBuilding"
           	{
				"signature"    	"CBaseObject::FinishedBuilding"
				"callconv"	"thiscall"
				"return"    	"void"
  				"this"        	"entity"
           	}
			"CBaseGrenade::Explode"
			{
				"offset"	"CBaseGrenade::Explode"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"pTrace"
					{
						"type"	"objectptr"
					}
					"bitsDamageType"
					{
						"type"	"int"
					}
				}
			}
			"CBaseGrenade::Detonate"
			{
				"offset"	"CBaseGrenade::Detonate"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			"CObjectSentrygun::Fire"
			{
				"signature"	"CObjectSentrygun::Fire"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"entity"
			}
			"CObjectSentrygun::FindTarget"
			{
				"signature"	"CObjectSentrygun::FindTarget"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"entity"
			}
			"CBasePlayer::ForceRespawn"
			{
				"offset"	"CBasePlayer::ForceRespawn"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			"CGameRules::FrameUpdatePostEntityThink"
			{
				"offset"	"CGameRules::FrameUpdatePostEntityThink"
				"hooktype"	"gamerules"
				"return"	"void"
				"this"		"ignore"
			}
			"CTFPlayer::CanAirDash"
			{
				"signature"	"CTFPlayer::CanAirDash"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"entity"
			}
			"CTFProjectile_HealingBolt::ImpactTeamPlayer()"
			{
				"signature"		"CTFProjectile_HealingBolt::ImpactTeamPlayer()"
				"callconv"		"thiscall"
				"return"		"void"
				"this"			"entity"
				"arguments"
				{
					"target"
					{
						"type"	"cbaseentity"
					}
				}
			}
			"CTFPlayer::GetChargeEffectBeingProvided"
			{
				"signature"	"CTFPlayer::GetChargeEffectBeingProvided"
				"callconv"	"thiscall"
				"return"	"int"
				"this"		"entity"
			}
			"CTFPlayer::IsPlayerClass"
			{
				"signature"	"CTFPlayer::IsPlayerClass"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"entity"
				"arguments"
				{
					"iClass"
					{
						"type"	"int"
					}
				}
			}
			"CTFPlayer::RegenThink"
			{
				"signature"	"CTFPlayer::RegenThink"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"entity"
			}
			"CTFPlayer::RemoveAllOwnedEntitiesFromWorld"
			{
				"signature"	"CTFPlayer::RemoveAllOwnedEntitiesFromWorld"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"bExplodeBuildings"
					{
						"type"	"bool"
					}
				}
			}
			"CTFParticleCannon::FireChargedShot"
            {
				   "offset"    	"CTFParticleCannon::FireChargedShot"
				   "hooktype"    "entity"
				   "return"    	"void"
				   "this"        "entity"
            }
			"CBaseCombatWeapon::FinishReload()"
			{
				"signature"		"CBaseCombatWeapon::FinishReload()"
				"callconv"		"thiscall"
				"return"		"void"
				"this"			"entity"
			}
			"CTFWeaponBase::FinishReload()"
			{
				"offset"		"CTFWeaponBase::FinishReload()"
				"hooktype"		"entity"
				"return"		"void"
				"this"			"entity"
			}
			"CBaseCombatWeapon::Reload()"
			{
				"offset"		"CBaseCombatWeapon::Reload()"
				"hooktype"		"entity"
				"return"		"void"
				"this"			"entity"
			}
			"CTFBaseRocket::Explode"
			{
				"offset"	"CTFBaseRocket::Explode"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"pTrace"
					{
						"type"	"objectptr"
					}
					"pEntity"
					{
						"type"	"cbaseentity"
					}
				}
			}
			"CTFProjectile_SpellFireball::Explode"
			{
				"offset"	"CTFProjectile_SpellFireball::Explode"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"pTrace"
					{
						"type"	"objectptr"
					}
				}
			}
			"CTFProjectile_Rocket::RocketTouch"
			{
				"offset"	"CTFProjectile_Rocket::RocketTouch"
				"callconv" 	"thiscall"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"pEntity"
					{
						"type"	"cbaseentity"
					}
				}
			}
			"CWeaponMedigun::PrimaryAttack()"
			{
				"offset"	"CWeaponMedigun::PrimaryAttack()"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			"CTFPistol_ScoutPrimary::SecondaryAttack()"
			{
				"offset"	"CTFPistol_ScoutPrimary::SecondaryAttack()"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			"CTFBot::Event_Killed()"
			{
				"offset"	"CTFBot::Event_Killed()"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			"CTFGrenadePipebombProjectile::PipebombTouch" 
			{
				// virtual void PipebombTouch( CBaseEntity *pOther )
				"offset" 		"CTFGrenadePipebombProjectile::PipebombTouch"
				"hooktype" 		"entity"
				"return" 		"void"
				"this" 			"entity"
				"arguments"
				{
					"other"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CTFWrench::Smack()" 
			{
				"offset" 		"CTFWrench::Smack()" 
				"hooktype" 		"entity"
				"return" 		"void"
				"this" 			"entity"
			}
			"CBaseObject::CheckUpgradeOnHit" 
			{
				"offset" 		"CBaseObject::CheckUpgradeOnHit" 
				"hooktype" 		"entity"
				"return" 		"bool"
				"this" 			"entity"
			}
			"CBasePlayer::EquipWearable" 
			{
				"offset" 		"CBasePlayer::EquipWearable"
				"hooktype" 		"entity"
				"return" 		"void"
				"this" 			"entity"
			}
			"CTFWeaponBaseMelee::Smack"
			{
				"signature"		"CTFWeaponBaseMelee::Smack"
				"callconv"		"thiscall"
				"return"		"void"
				"this"			"entity"
			}
			"CTFPlayer::SpeakConceptIfAllowed()" 
			{
				"signature"		"CTFPlayer::SpeakConceptIfAllowed()"
				"callconv"		"thiscall"
				"return"		"bool"
				"this"			"entity"
				"arguments"
				{
					"iConcept"
					{
						"type"	"int"
					}
					"modifiers"
					{
						"type"	"charptr"
					}
					"pszOutResponseChosen"
					{
						"type"	"charptr"
					}
					"bufsize"
					{
						"type"	"int"
					}
					"IRecipientFilter"
					{
						"type"	"int"
					}
				}
			}
			"CTFPlayer::ManageRegularWeapons()"
			{
				"signature"		"CTFPlayer::ManageRegularWeapons()"
				"callconv"		"thiscall"
				"return"		"void"
				"this"			"entity"
				"arguments"
				{
					"class_data"
					{
						"type"	"int"
					}
				}
			}
			"CWeaponMedigun::AllowedToHealTarget()"
			{
				"signature"		"CWeaponMedigun::AllowedToHealTarget()"
				"callconv"		"thiscall"
				"return"		"bool"
				"this"			"entity"
				"arguments"
				{
					"heal_target"
					{
						"type"	"cbaseentity"
					}
				}
			}
			"CBaseCombatWeapon::ItemPostFrame()"
			{
				"offset"		"CBaseCombatWeapon::ItemPostFrame()"
				"hooktype"		"entity"
				"return"		"void"
				"this"			"entity"
			}
			"CBaseEntity::UpdateTransmitState()"
			{
				"offset"		"CBaseEntity::UpdateTransmitState()"
				"hooktype"		"entity"
				"return"		"int"
				"this"			"entity"
			}
			"CTeamplayRoundBasedRules::ResetPlayerAndTeamReadyState"
			{
				"signature"		"CTeamplayRoundBasedRules::ResetPlayerAndTeamReadyState"
				"callconv"		"thiscall"
				"return"		"void"
				"this"			"address"
			}
		}
		"Offsets"
		{
			"CBaseObject::CheckUpgradeOnHit"		
			{		
				"windows"	"365"		
				"linux"		"367"
			}
			"CBaseEntity::WorldSpaceCenter"		
			{		
				"windows"	"155"		
				"linux"		"156"
			}
			"CTFWrench::Smack()" 
			{
				"windows" 	"470"
				"linux" 	"477"
			}
			"CTFGrenadePipebombProjectile::PipebombTouch" 
			{
				"windows" 	"260"
				"linux" 	"261"
			}
			"CEconItemView::IterateAttributes"
			{
				"windows"	"18"
				"linux"		"19"
			}
			"CTFBot::Event_Killed()"
			{
				"windows"	"68"
				"linux"		"69"
			}
			"CWeaponMedigun::PrimaryAttack()"
			{
				"windows"	"286"
				"linux"		"292"
			}
			"CTFPistol_ScoutPrimary::SecondaryAttack()"
			{
				"windows"	"287"
				"linux"		"293"
			}
			"CTFWeaponBase::FinishReload()"
			{
				"windows"	"281"
				"linux"		"287"
			}
			"CBaseCombatWeapon::Reload()"
			{
				"windows"	"283"
				"linux"		"289"
			}
			"CBaseObject::MakeCarriedObject"	//CBaseObject::MakeCarriedObject(CTFPlayer *)
			{
				"windows"	"387"
				"linux"		"389"
			}
			"CBasePlayer::EquipWearable"
			{
				"linux"		"439"
				"windows"	"438"
			}
			"CTFPlayerAnimState::DoAnimationEvent" //(PlayerAnimEvent_t, int)
			{
				"linux"		"3"
				"windows"	"2"
			}
			"CTFPlayerAnimState::Update"	//(float, float)
			{
				"linux"		"5"
				"windows"	"4"
			}
			"CPlayerInfo::GetLocalOrigin"	//(float)
			{
				"linux"		"3"
				"windows"	"3"
			}
			"CPlayerInfo::GetLocalAngles"	//(float)
			{
				"linux"		"5"
				"windows"	"5"
			}
			"CBasePlayer::ForceRespawn"
			{
				"linux"		"337"
				"windows"	"336"
			}
			"CGameRules::FrameUpdatePostEntityThink"
			{
				"linux"		"16"
				"windows"	"15"
			}
			"CBaseEntity::GetVectors"
			{
				"windows"	"142"
				"linux"		"143"
			}
			"CTFParticleCannon::FireChargedShot"
			{
				"windows"	"491"
				"linux"		"498"
			}
			"CBaseGrenade::Explode"
			{
				"linux"		"236"
				"windows"	"235"
			}
			"CBaseGrenade::Detonate"
			{
				"linux"		"237"
				"windows"	"236"
			}
			"CTFBaseRocket::Explode"
			{
				"linux"		"240"
				"windows"	"239"
			}
			"CTFProjectile_SpellFireball::Explode"
			{
				"linux"		"250"
				"windows"	"247"
			}
			"CTFProjectile_Rocket::RocketTouch"
			{
				"linux"		"239"
				"windows"	"238"
			}
			"CBasePlayer::CheatImpulseCommands"
			{
				"linux"		"379"
				"windows"	"378"
			}
			"CBaseCombatWeapon::ItemPostFrame()"
			{
				"windows"	"272"
				"linux"		"278"
			}
			//CBaseEntity is arbitrary.
			"CBaseEntity::UpdateTransmitState()"
			{
				"windows"	"21"
				"linux"		"22"
			}
			"CTFWeaponBaseMelee::GetShootSound"
			{
				"windows"	"337"
				"linux"		"343"
			}
			"CBaseAnimating::RefreshCollisionBounds"
			{
				"windows"	"218"
				"linux"		"219"
			}
			"IBody::GetSolidMask"
			{
				"windows"	"81"
				"linux"		"82"
			}
			"CBaseAnimating::BecomeRagdollOnClient"
			{
				"windows"	"205"
				"linux"		"206"
			}
		}
	}
}